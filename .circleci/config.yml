version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - black-check
      - build-and-test:
          requires:
            - black-check
          matrix:
            parameters:
              python-version: ["2.7", "3.6", "3.7", "3.8", "3.9"]


install-tox: &install-tox
  run:
    name: Install Tox
    command: pip install tox

jobs:
  black-check:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - <<: *install-tox
      - run:
          name: Run Black
          command: tox -e black

  build-and-test:
    parameters:
      python-version:
        type: string

    docker:
      - image: python:<< parameters.python-version >>
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: tests/requirements.txt
      - <<: *install-tox
      - run:
          name: Run tests
          command: |
            mkdir test-results
            tox -e pytest
      - store_test_results:
          path: test-results
